import { HttpRequest, HttpHandler, HttpEvent, HttpInterceptor } from "@angular/common/http";
import { JwtHelperService } from "./jwthelper.service";
import { Observable } from "rxjs";
import * as ɵngcc0 from '@angular/core';
export declare class JwtInterceptor implements HttpInterceptor {
    jwtHelper: JwtHelperService;
    private document;
    tokenGetter: (request?: HttpRequest<any>) => string | null | Promise<string | null>;
    headerName: string;
    authScheme: string | ((request?: HttpRequest<any>) => string);
    allowedDomains: Array<string | RegExp>;
    disallowedRoutes: Array<string | RegExp>;
    throwNoTokenError: boolean;
    skipWhenExpired: boolean;
    standardPorts: string[];
    constructor(config: any, jwtHelper: JwtHelperService, document: Document);
    isAllowedDomain(request: HttpRequest<any>): boolean;
    isDisallowedRoute(request: HttpRequest<any>): boolean;
    handleInterception(token: string | null, request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JwtInterceptor>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<JwtInterceptor>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiand0LmludGVyY2VwdG9yLmQudHMiLCJzb3VyY2VzIjpbImp3dC5pbnRlcmNlcHRvci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7O0FBR0E7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEh0dHBSZXF1ZXN0LCBIdHRwSGFuZGxlciwgSHR0cEV2ZW50LCBIdHRwSW50ZXJjZXB0b3IgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IEp3dEhlbHBlclNlcnZpY2UgfSBmcm9tIFwiLi9qd3RoZWxwZXIuc2VydmljZVwiO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBKd3RJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gICAgand0SGVscGVyOiBKd3RIZWxwZXJTZXJ2aWNlO1xuICAgIHByaXZhdGUgZG9jdW1lbnQ7XG4gICAgdG9rZW5HZXR0ZXI6IChyZXF1ZXN0PzogSHR0cFJlcXVlc3Q8YW55PikgPT4gc3RyaW5nIHwgbnVsbCB8IFByb21pc2U8c3RyaW5nIHwgbnVsbD47XG4gICAgaGVhZGVyTmFtZTogc3RyaW5nO1xuICAgIGF1dGhTY2hlbWU6IHN0cmluZyB8ICgocmVxdWVzdD86IEh0dHBSZXF1ZXN0PGFueT4pID0+IHN0cmluZyk7XG4gICAgYWxsb3dlZERvbWFpbnM6IEFycmF5PHN0cmluZyB8IFJlZ0V4cD47XG4gICAgZGlzYWxsb3dlZFJvdXRlczogQXJyYXk8c3RyaW5nIHwgUmVnRXhwPjtcbiAgICB0aHJvd05vVG9rZW5FcnJvcjogYm9vbGVhbjtcbiAgICBza2lwV2hlbkV4cGlyZWQ6IGJvb2xlYW47XG4gICAgc3RhbmRhcmRQb3J0czogc3RyaW5nW107XG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBhbnksIGp3dEhlbHBlcjogSnd0SGVscGVyU2VydmljZSwgZG9jdW1lbnQ6IERvY3VtZW50KTtcbiAgICBpc0FsbG93ZWREb21haW4ocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW47XG4gICAgaXNEaXNhbGxvd2VkUm91dGUocmVxdWVzdDogSHR0cFJlcXVlc3Q8YW55Pik6IGJvb2xlYW47XG4gICAgaGFuZGxlSW50ZXJjZXB0aW9uKHRva2VuOiBzdHJpbmcgfCBudWxsLCByZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xuICAgIGludGVyY2VwdChyZXF1ZXN0OiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+O1xufVxuIl19