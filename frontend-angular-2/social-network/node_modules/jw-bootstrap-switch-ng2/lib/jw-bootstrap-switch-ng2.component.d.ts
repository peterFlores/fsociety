import { ElementRef, AfterViewInit, SimpleChanges, NgZone, EventEmitter, OnChanges } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as ɵngcc0 from '@angular/core';
export declare class JwBootstrapSwitchNg2Component implements AfterViewInit, ControlValueAccessor, OnChanges {
    private ngZone;
    handleWidth: number;
    labelWidth: number;
    labelText: string;
    inverse: boolean;
    baseClass: string;
    onText: string;
    offText: string;
    disabled: boolean;
    readonly: boolean;
    private _focused;
    private _size;
    private _animate;
    private _innerAnimate;
    private _indeterminate;
    private _onColor;
    private _offColor;
    private _wrapperClass;
    private _innerState;
    private _innerHandleWidth;
    private _innerLabelWidth;
    private _dragStart;
    private _dragEnd;
    private _onTouchedCallback;
    private _onChangeCallback;
    changeState: EventEmitter<any>;
    container: ElementRef;
    on: ElementRef;
    label: ElementRef;
    off: ElementRef;
    private $on();
    private $off();
    private $label();
    private $container();
    /**
     * @description:  Function to set the Classes for the Wrapper Div
     * @returns string
     */
    getWrapperClasses(): string;
    /**
     * @description Function to set the css classes for #on
     * @returns string
     */
    getOnClasses(): string;
    /**
     * @description Function to set the css classes for #off
     * @returns string
     */
    getOffClasses(): string;
    /**
     * @description  Function set the marging of the #label when change the state
     * @returns string
     */
    getLabelMarginLeft(): string;
    constructor(ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    onClick(): void;
    onKeyDown(e: KeyboardEvent): void;
    private onDragStart(e);
    private onDragMove(e);
    private onDragEnd(e, removeDragEnd?);
    onTouchStart(e: any): void;
    onMouseDown(e: any): void;
    onTouchMove(e: any): void;
    onMouseMove(e: any): void;
    onMouseUp(e: Event): void;
    onTouchEnd(e: Event): void;
    onMouseLeave(e: Event): void;
    onFocus(): void;
    onBlur(): void;
    /**
     * @description Function to make recalculate the size of the elements when options change
     * @param disableAnimation
     */
    private calculateWith(disableAnimation?);
    setBaseClass: string;
    setWrapperClass: string;
    setOffText: string;
    setLabelText: string;
    setOnText: string;
    setSize: string;
    setAnimate: boolean;
    setOnColor: string;
    setOffColor: string;
    setDisabled: boolean;
    setReadOnly: boolean;
    setIndeterminate: boolean;
    setInverse: boolean;
    setHandleWidth: number | 'auto';
    setLabelWidth: number | 'auto';
    value: boolean;
    private setStateValue(v);
    writeValue(value: boolean): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<JwBootstrapSwitchNg2Component>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<JwBootstrapSwitchNg2Component, "bSwitch", never, {
    "setBaseClass": "switch-base-class";
    "setWrapperClass": "switch-wrapper-class";
    "setOffText": "switch-off-text";
    "setLabelText": "switch-label-text";
    "setOnText": "switch-on-text";
    "setSize": "switch-size";
    "setAnimate": "switch-animate";
    "setOnColor": "switch-on-color";
    "setOffColor": "switch-off-color";
    "setDisabled": "switch-disabled";
    "setReadOnly": "switch-readonly";
    "setIndeterminate": "switch-indeterminate";
    "setInverse": "switch-inverse";
    "setHandleWidth": "switch-handle-width";
    "setLabelWidth": "switch-label-width";
}, {
    "changeState": "changeState";
}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianctYm9vdHN0cmFwLXN3aXRjaC1uZzIuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImp3LWJvb3RzdHJhcC1zd2l0Y2gtbmcyLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBaUdBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgU2ltcGxlQ2hhbmdlcywgTmdab25lLCBFdmVudEVtaXR0ZXIsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgSndCb290c3RyYXBTd2l0Y2hOZzJDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciwgT25DaGFuZ2VzIHtcclxuICAgIHByaXZhdGUgbmdab25lO1xyXG4gICAgaGFuZGxlV2lkdGg6IG51bWJlcjtcclxuICAgIGxhYmVsV2lkdGg6IG51bWJlcjtcclxuICAgIGxhYmVsVGV4dDogc3RyaW5nO1xyXG4gICAgaW52ZXJzZTogYm9vbGVhbjtcclxuICAgIGJhc2VDbGFzczogc3RyaW5nO1xyXG4gICAgb25UZXh0OiBzdHJpbmc7XHJcbiAgICBvZmZUZXh0OiBzdHJpbmc7XHJcbiAgICBkaXNhYmxlZDogYm9vbGVhbjtcclxuICAgIHJlYWRvbmx5OiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBfZm9jdXNlZDtcclxuICAgIHByaXZhdGUgX3NpemU7XHJcbiAgICBwcml2YXRlIF9hbmltYXRlO1xyXG4gICAgcHJpdmF0ZSBfaW5uZXJBbmltYXRlO1xyXG4gICAgcHJpdmF0ZSBfaW5kZXRlcm1pbmF0ZTtcclxuICAgIHByaXZhdGUgX29uQ29sb3I7XHJcbiAgICBwcml2YXRlIF9vZmZDb2xvcjtcclxuICAgIHByaXZhdGUgX3dyYXBwZXJDbGFzcztcclxuICAgIHByaXZhdGUgX2lubmVyU3RhdGU7XHJcbiAgICBwcml2YXRlIF9pbm5lckhhbmRsZVdpZHRoO1xyXG4gICAgcHJpdmF0ZSBfaW5uZXJMYWJlbFdpZHRoO1xyXG4gICAgcHJpdmF0ZSBfZHJhZ1N0YXJ0O1xyXG4gICAgcHJpdmF0ZSBfZHJhZ0VuZDtcclxuICAgIHByaXZhdGUgX29uVG91Y2hlZENhbGxiYWNrO1xyXG4gICAgcHJpdmF0ZSBfb25DaGFuZ2VDYWxsYmFjaztcclxuICAgIGNoYW5nZVN0YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcclxuICAgIGNvbnRhaW5lcjogRWxlbWVudFJlZjtcclxuICAgIG9uOiBFbGVtZW50UmVmO1xyXG4gICAgbGFiZWw6IEVsZW1lbnRSZWY7XHJcbiAgICBvZmY6IEVsZW1lbnRSZWY7XHJcbiAgICBwcml2YXRlICRvbigpO1xyXG4gICAgcHJpdmF0ZSAkb2ZmKCk7XHJcbiAgICBwcml2YXRlICRsYWJlbCgpO1xyXG4gICAgcHJpdmF0ZSAkY29udGFpbmVyKCk7XHJcbiAgICAvKipcclxuICAgICAqIEBkZXNjcmlwdGlvbjogIEZ1bmN0aW9uIHRvIHNldCB0aGUgQ2xhc3NlcyBmb3IgdGhlIFdyYXBwZXIgRGl2XHJcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0V3JhcHBlckNsYXNzZXMoKTogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAZGVzY3JpcHRpb24gRnVuY3Rpb24gdG8gc2V0IHRoZSBjc3MgY2xhc3NlcyBmb3IgI29uXHJcbiAgICAgKiBAcmV0dXJucyBzdHJpbmdcclxuICAgICAqL1xyXG4gICAgZ2V0T25DbGFzc2VzKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRvIHNldCB0aGUgY3NzIGNsYXNzZXMgZm9yICNvZmZcclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXRPZmZDbGFzc2VzKCk6IHN0cmluZztcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uICBGdW5jdGlvbiBzZXQgdGhlIG1hcmdpbmcgb2YgdGhlICNsYWJlbCB3aGVuIGNoYW5nZSB0aGUgc3RhdGVcclxuICAgICAqIEByZXR1cm5zIHN0cmluZ1xyXG4gICAgICovXHJcbiAgICBnZXRMYWJlbE1hcmdpbkxlZnQoKTogc3RyaW5nO1xyXG4gICAgY29uc3RydWN0b3Iobmdab25lOiBOZ1pvbmUpO1xyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcclxuICAgIG9uQ2xpY2soKTogdm9pZDtcclxuICAgIG9uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KTogdm9pZDtcclxuICAgIHByaXZhdGUgb25EcmFnU3RhcnQoZSk7XHJcbiAgICBwcml2YXRlIG9uRHJhZ01vdmUoZSk7XHJcbiAgICBwcml2YXRlIG9uRHJhZ0VuZChlLCByZW1vdmVEcmFnRW5kPyk7XHJcbiAgICBvblRvdWNoU3RhcnQoZTogYW55KTogdm9pZDtcclxuICAgIG9uTW91c2VEb3duKGU6IGFueSk6IHZvaWQ7XHJcbiAgICBvblRvdWNoTW92ZShlOiBhbnkpOiB2b2lkO1xyXG4gICAgb25Nb3VzZU1vdmUoZTogYW55KTogdm9pZDtcclxuICAgIG9uTW91c2VVcChlOiBFdmVudCk6IHZvaWQ7XHJcbiAgICBvblRvdWNoRW5kKGU6IEV2ZW50KTogdm9pZDtcclxuICAgIG9uTW91c2VMZWF2ZShlOiBFdmVudCk6IHZvaWQ7XHJcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XHJcbiAgICBvbkJsdXIoKTogdm9pZDtcclxuICAgIC8qKlxyXG4gICAgICogQGRlc2NyaXB0aW9uIEZ1bmN0aW9uIHRvIG1ha2UgcmVjYWxjdWxhdGUgdGhlIHNpemUgb2YgdGhlIGVsZW1lbnRzIHdoZW4gb3B0aW9ucyBjaGFuZ2VcclxuICAgICAqIEBwYXJhbSBkaXNhYmxlQW5pbWF0aW9uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgY2FsY3VsYXRlV2l0aChkaXNhYmxlQW5pbWF0aW9uPyk7XHJcbiAgICBzZXRCYXNlQ2xhc3M6IHN0cmluZztcclxuICAgIHNldFdyYXBwZXJDbGFzczogc3RyaW5nO1xyXG4gICAgc2V0T2ZmVGV4dDogc3RyaW5nO1xyXG4gICAgc2V0TGFiZWxUZXh0OiBzdHJpbmc7XHJcbiAgICBzZXRPblRleHQ6IHN0cmluZztcclxuICAgIHNldFNpemU6IHN0cmluZztcclxuICAgIHNldEFuaW1hdGU6IGJvb2xlYW47XHJcbiAgICBzZXRPbkNvbG9yOiBzdHJpbmc7XHJcbiAgICBzZXRPZmZDb2xvcjogc3RyaW5nO1xyXG4gICAgc2V0RGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBzZXRSZWFkT25seTogYm9vbGVhbjtcclxuICAgIHNldEluZGV0ZXJtaW5hdGU6IGJvb2xlYW47XHJcbiAgICBzZXRJbnZlcnNlOiBib29sZWFuO1xyXG4gICAgc2V0SGFuZGxlV2lkdGg6IG51bWJlciB8ICdhdXRvJztcclxuICAgIHNldExhYmVsV2lkdGg6IG51bWJlciB8ICdhdXRvJztcclxuICAgIHZhbHVlOiBib29sZWFuO1xyXG4gICAgcHJpdmF0ZSBzZXRTdGF0ZVZhbHVlKHYpO1xyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYm9vbGVhbik6IHZvaWQ7XHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkO1xyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQ7XHJcbn1cclxuIl19