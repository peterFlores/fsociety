import { BaseLoginProvider } from '../entities/base-login-provider';
import { SocialUser } from '../entities/social-user';
export class VKLoginProvider extends BaseLoginProvider {
    constructor(clientId, initOptions = {
        fields: 'photo_max,contacts',
        version: '5.124',
    }) {
        super();
        this.clientId = clientId;
        this.initOptions = initOptions;
        this.VK_API_URL = '//vk.com/js/api/openapi.js';
        this.VK_API_GET_USER = 'users.get';
    }
    initialize() {
        return new Promise((resolve, reject) => {
            this.loadScript(VKLoginProvider.PROVIDER_ID, this.VK_API_URL, () => {
                VK.init({
                    apiId: this.clientId,
                });
                resolve();
            });
        });
    }
    getLoginStatus() {
        return new Promise((resolve, reject) => this.getLoginStatusInternal(resolve, reject));
    }
    signIn() {
        return new Promise((resolve, reject) => this.signInInternal(resolve, reject));
    }
    signOut() {
        return new Promise((resolve, reject) => {
            VK.Auth.logout((response) => {
                resolve();
            });
        });
    }
    signInInternal(resolve, reject) {
        VK.Auth.login((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    getUser(userId, token, resolve) {
        VK.Api.call(this.VK_API_GET_USER, {
            user_id: userId,
            fields: this.initOptions.fields,
            v: this.initOptions.version,
        }, (userResponse) => {
            resolve(this.createUser(Object.assign({}, { token }, userResponse.response[0])));
        });
    }
    getLoginStatusInternal(resolve, reject) {
        VK.Auth.getLoginStatus((loginResponse) => {
            if (loginResponse.status === 'connected') {
                this.getUser(loginResponse.session.mid, loginResponse.session.sid, resolve);
            }
        });
    }
    createUser(response) {
        const user = new SocialUser();
        user.id = response.id;
        user.name = `${response.first_name} ${response.last_name}`;
        user.photoUrl = response.photo_max;
        user.authToken = response.token;
        return user;
    }
}
VKLoginProvider.PROVIDER_ID = 'VK';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmstbG9naW4tcHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9saWIvc3JjL3Byb3ZpZGVycy92ay1sb2dpbi1wcm92aWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUNwRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFJckQsTUFBTSxPQUFPLGVBQWdCLFNBQVEsaUJBQWlCO0lBQ3BELFlBQ1UsUUFBZ0IsRUFDaEIsY0FBbUI7UUFDekIsTUFBTSxFQUFFLG9CQUFvQjtRQUM1QixPQUFPLEVBQUUsT0FBTztLQUNqQjtRQUVELEtBQUssRUFBRSxDQUFDO1FBTkEsYUFBUSxHQUFSLFFBQVEsQ0FBUTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FHbEI7UUFPYyxlQUFVLEdBQUcsNEJBQTRCLENBQUM7UUFDMUMsb0JBQWUsR0FBRyxXQUFXLENBQUM7SUFML0MsQ0FBQztJQU9ELFVBQVU7UUFDUixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ3JDLElBQUksQ0FBQyxVQUFVLENBQ2IsZUFBZSxDQUFDLFdBQVcsRUFDM0IsSUFBSSxDQUFDLFVBQVUsRUFDZixHQUFHLEVBQUU7Z0JBQ0gsRUFBRSxDQUFDLElBQUksQ0FBQztvQkFDTixLQUFLLEVBQUUsSUFBSSxDQUFDLFFBQVE7aUJBQ3JCLENBQUMsQ0FBQztnQkFFSCxPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUMsQ0FDRixDQUFDO1FBQ0osQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsY0FBYztRQUNaLE9BQU8sSUFBSSxPQUFPLENBQWEsQ0FBQyxPQUFZLEVBQUUsTUFBVyxFQUFFLEVBQUUsQ0FDM0QsSUFBSSxDQUFDLHNCQUFzQixDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FDN0MsQ0FBQztJQUNKLENBQUM7SUFFRCxNQUFNO1FBQ0osT0FBTyxJQUFJLE9BQU8sQ0FBYSxDQUFDLE9BQVksRUFBRSxNQUFXLEVBQUUsRUFBRSxDQUMzRCxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FDckMsQ0FBQztJQUNKLENBQUM7SUFFRCxPQUFPO1FBQ0wsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNyQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLFFBQWEsRUFBRSxFQUFFO2dCQUMvQixPQUFPLEVBQUUsQ0FBQztZQUNaLENBQUMsQ0FBQyxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sY0FBYyxDQUFDLE9BQVksRUFBRSxNQUFXO1FBQzlDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsYUFBa0IsRUFBRSxFQUFFO1lBQ25DLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxXQUFXLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxPQUFPLENBQ1YsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ3pCLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUN6QixPQUFPLENBQ1IsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sT0FBTyxDQUFDLE1BQVcsRUFBRSxLQUFVLEVBQUUsT0FBWTtRQUNuRCxFQUFFLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDVCxJQUFJLENBQUMsZUFBZSxFQUNwQjtZQUNFLE9BQU8sRUFBRSxNQUFNO1lBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTTtZQUMvQixDQUFDLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO1NBQzVCLEVBQ0QsQ0FBQyxZQUFpQixFQUFFLEVBQUU7WUFDcEIsT0FBTyxDQUNMLElBQUksQ0FBQyxVQUFVLENBQ2IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRSxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQ3ZELENBQ0YsQ0FBQztRQUNKLENBQUMsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVPLHNCQUFzQixDQUFDLE9BQVksRUFBRSxNQUFXO1FBQ3RELEVBQUUsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsYUFBa0IsRUFBRSxFQUFFO1lBQzVDLElBQUksYUFBYSxDQUFDLE1BQU0sS0FBSyxXQUFXLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxPQUFPLENBQ1YsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQ3pCLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUN6QixPQUFPLENBQ1IsQ0FBQzthQUNIO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRU8sVUFBVSxDQUFDLFFBQWE7UUFDOUIsTUFBTSxJQUFJLEdBQWUsSUFBSSxVQUFVLEVBQUUsQ0FBQztRQUMxQyxJQUFJLENBQUMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUM7UUFDdEIsSUFBSSxDQUFDLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxVQUFVLElBQUksUUFBUSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQzNELElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQztRQUNuQyxJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDaEMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOztBQTFGc0IsMkJBQVcsR0FBVyxJQUFJLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTG9naW5Qcm92aWRlciB9IGZyb20gJy4uL2VudGl0aWVzL2Jhc2UtbG9naW4tcHJvdmlkZXInO1xyXG5pbXBvcnQgeyBTb2NpYWxVc2VyIH0gZnJvbSAnLi4vZW50aXRpZXMvc29jaWFsLXVzZXInO1xyXG5cclxuZGVjbGFyZSBsZXQgVks6IGFueTtcclxuXHJcbmV4cG9ydCBjbGFzcyBWS0xvZ2luUHJvdmlkZXIgZXh0ZW5kcyBCYXNlTG9naW5Qcm92aWRlciB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNsaWVudElkOiBzdHJpbmcsXHJcbiAgICBwcml2YXRlIGluaXRPcHRpb25zOiBhbnkgPSB7XHJcbiAgICAgIGZpZWxkczogJ3Bob3RvX21heCxjb250YWN0cycsXHJcbiAgICAgIHZlcnNpb246ICc1LjEyNCcsXHJcbiAgICB9XHJcbiAgKSB7XHJcbiAgICBzdXBlcigpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBQUk9WSURFUl9JRDogc3RyaW5nID0gJ1ZLJztcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBWS19BUElfVVJMID0gJy8vdmsuY29tL2pzL2FwaS9vcGVuYXBpLmpzJztcclxuICBwcml2YXRlIHJlYWRvbmx5IFZLX0FQSV9HRVRfVVNFUiA9ICd1c2Vycy5nZXQnO1xyXG5cclxuICBpbml0aWFsaXplKCk6IFByb21pc2U8dm9pZD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgdGhpcy5sb2FkU2NyaXB0KFxyXG4gICAgICAgIFZLTG9naW5Qcm92aWRlci5QUk9WSURFUl9JRCxcclxuICAgICAgICB0aGlzLlZLX0FQSV9VUkwsXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgVksuaW5pdCh7XHJcbiAgICAgICAgICAgIGFwaUlkOiB0aGlzLmNsaWVudElkLFxyXG4gICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZ2V0TG9naW5TdGF0dXMoKTogUHJvbWlzZTxTb2NpYWxVc2VyPiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2U8U29jaWFsVXNlcj4oKHJlc29sdmU6IGFueSwgcmVqZWN0OiBhbnkpID0+XHJcbiAgICAgIHRoaXMuZ2V0TG9naW5TdGF0dXNJbnRlcm5hbChyZXNvbHZlLCByZWplY3QpXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgc2lnbkluKCk6IFByb21pc2U8U29jaWFsVXNlcj4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlPFNvY2lhbFVzZXI+KChyZXNvbHZlOiBhbnksIHJlamVjdDogYW55KSA9PlxyXG4gICAgICB0aGlzLnNpZ25JbkludGVybmFsKHJlc29sdmUsIHJlamVjdClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBzaWduT3V0KCk6IFByb21pc2U8YW55PiB7XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBWSy5BdXRoLmxvZ291dCgocmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUoKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2lnbkluSW50ZXJuYWwocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkge1xyXG4gICAgVksuQXV0aC5sb2dpbigobG9naW5SZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgIGlmIChsb2dpblJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcclxuICAgICAgICB0aGlzLmdldFVzZXIoXHJcbiAgICAgICAgICBsb2dpblJlc3BvbnNlLnNlc3Npb24ubWlkLFxyXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLnNpZCxcclxuICAgICAgICAgIHJlc29sdmVcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0VXNlcih1c2VySWQ6IGFueSwgdG9rZW46IGFueSwgcmVzb2x2ZTogYW55KSB7XHJcbiAgICBWSy5BcGkuY2FsbChcclxuICAgICAgdGhpcy5WS19BUElfR0VUX1VTRVIsXHJcbiAgICAgIHtcclxuICAgICAgICB1c2VyX2lkOiB1c2VySWQsXHJcbiAgICAgICAgZmllbGRzOiB0aGlzLmluaXRPcHRpb25zLmZpZWxkcyxcclxuICAgICAgICB2OiB0aGlzLmluaXRPcHRpb25zLnZlcnNpb24sXHJcbiAgICAgIH0sXHJcbiAgICAgICh1c2VyUmVzcG9uc2U6IGFueSkgPT4ge1xyXG4gICAgICAgIHJlc29sdmUoXHJcbiAgICAgICAgICB0aGlzLmNyZWF0ZVVzZXIoXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oe30sIHsgdG9rZW4gfSwgdXNlclJlc3BvbnNlLnJlc3BvbnNlWzBdKVxyXG4gICAgICAgICAgKVxyXG4gICAgICAgICk7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldExvZ2luU3RhdHVzSW50ZXJuYWwocmVzb2x2ZTogYW55LCByZWplY3Q6IGFueSkge1xyXG4gICAgVksuQXV0aC5nZXRMb2dpblN0YXR1cygobG9naW5SZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgIGlmIChsb2dpblJlc3BvbnNlLnN0YXR1cyA9PT0gJ2Nvbm5lY3RlZCcpIHtcclxuICAgICAgICB0aGlzLmdldFVzZXIoXHJcbiAgICAgICAgICBsb2dpblJlc3BvbnNlLnNlc3Npb24ubWlkLFxyXG4gICAgICAgICAgbG9naW5SZXNwb25zZS5zZXNzaW9uLnNpZCxcclxuICAgICAgICAgIHJlc29sdmVcclxuICAgICAgICApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgY3JlYXRlVXNlcihyZXNwb25zZTogYW55KTogU29jaWFsVXNlciB7XHJcbiAgICBjb25zdCB1c2VyOiBTb2NpYWxVc2VyID0gbmV3IFNvY2lhbFVzZXIoKTtcclxuICAgIHVzZXIuaWQgPSByZXNwb25zZS5pZDtcclxuICAgIHVzZXIubmFtZSA9IGAke3Jlc3BvbnNlLmZpcnN0X25hbWV9ICR7cmVzcG9uc2UubGFzdF9uYW1lfWA7XHJcbiAgICB1c2VyLnBob3RvVXJsID0gcmVzcG9uc2UucGhvdG9fbWF4O1xyXG4gICAgdXNlci5hdXRoVG9rZW4gPSByZXNwb25zZS50b2tlbjtcclxuICAgIHJldHVybiB1c2VyO1xyXG4gIH1cclxufVxyXG4iXX0=